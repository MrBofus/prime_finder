#include <iostream>
#include "prime_functions_fast.h"

FILE* primefile = fopen("factors2.txt", "a");

int factorize(mpz_t prime, unsigned int p, int min_digits) {
    int count = 0;

    mpz_t n, comparator, iterator, square_root;
    mpz_inits(n, comparator, iterator, square_root, NULL);
    mpz_set(n, prime);
    mpz_set(comparator, n);
 
    // count the number of times 2 divides
    mpz_mod_ui(comparator, n, 2);
    while ( mpz_cmp_ui(comparator, 0) == 0 ){
        mpz_rshift(n, n, 1); // equivalent to n=n/2;
        count++;

        mpz_set(comparator, n);
        mpz_mod_ui(comparator, n, 2);
    }
 
    // if 2 divides it
    if (count){
        fputs("2 ", primefile);
        fprintf(primefile, "%u", count);
        fputs("\n", primefile);
    }

    if (mpz_cmp_ui(n, 0) < 0){
        mpz_clears(n, comparator, iterator, square_root, NULL);
        return 0;
    }
 
    mpz_set(comparator, n);
    mpz_sqrt(square_root, n);
    mpz_set_ui(iterator, 3);

    // check for all the possible numbers that can
    // divide it
    while (mpz_cmp(iterator, square_root) <= 0) {
        count = 0;

        mpz_mod(comparator, n, iterator);
        while (mpz_cmp_ui(comparator, 0) == 0) {
            count++;
            mpz_div(n, n, iterator);
            mpz_set(comparator, n);
            mpz_mod(comparator, n, iterator);
        }

        if (count) {
            mpz_out_str(primefile, 10, iterator);
            fputs(" ", primefile);
            fprintf(primefile, "%u", count); 
            fputs("\n", primefile);
        }

        mpz_add_ui(iterator, iterator, 2);
    }

    // if n at the end is a prime number.
    if ( mpz_cmp_ui(n, 2) > 0 ){
        size_t length = mpz_sizeinbase(n, 10);
        
        if (length < min_digits) {
            mpz_out_str(primefile, 10, n);
            fputs(" 1\n", primefile);

            cout << "\n found one -- " << p << endl;
            // gmp_printf ("%Zd 1\n", n);
        }
        else{
            fputs("factor was too long\n", primefile);
        }
    }
    else {cout << "\n found one -- " << p << endl;}
    
    mpz_clears(n, comparator, iterator, square_root, NULL);
    return 0;
}

int main(void) {
    mpz_t prime;
    mpz_init(prime);
    mpz_set_str(prime, "5684634968413845", 10);
    //mpz_set_str(prime, "", 10);

    for (unsigned int i = 1; i < 1000; i++) {
        cout << "\rtrying f = " << i;
        cout.flush();

        fputs("\n`````````````````````````````````````\n", primefile);
        fprintf(primefile, "%d", i);
        fputs("\n`````````````````````````````````````\n", primefile);
        
        mpz_sub_ui(prime, prime, 1);
        int j = factorize(prime, i, 3);

        fputs("\n`````````````````````````````````````\n", primefile);
    }

    cout << "\n";

    fclose(primefile);
    mpz_clear(prime);
    return 0;
}